{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 HelveticaNeue-Bold;\f2\fswiss\fcharset0 Helvetica;
\f3\fnil\fcharset0 Menlo-Bold;\f4\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red46\green45\blue42;\red255\green255\blue255;\red162\green70\blue22;
}
{\*\expandedcolortbl;;\cssrgb\c23529\c23137\c21569;\cssrgb\c100000\c100000\c100000;\cssrgb\c70196\c35294\c10588;
}
{\info
{\author Elisabeth Robson}}\margl1440\margr1440\vieww19520\viewh25200\viewkind0
\deftab720
\pard\pardeftab720\sl920\partightenfactor0

\f0\fs72 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Audience Question\
\pard\pardeftab720\partightenfactor0

\fs36 \cf2 \cb1 
\f1\b \cb3 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b0\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {{\NeXTGraphic Pasted Graphic.png \width1440 \height1440 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\f1\b\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\sa400\partightenfactor0
\cf2 Could I animate my circles by resetting the radius back to 0 in\'a0
\f3 \cf4 \strokec4 updateDisplay
\f1 \cf2 \strokec2 ?
\f0\b0 \cb1 \
\pard\pardeftab720\sa400\partightenfactor0
\cf2 \cb3 You could! For instance, you could write another\'a0
\f4 \cf4 \strokec4 for
\f0 \cf2 \strokec2 \'a0loop to run after the loop we already have to go through each circle in the\'a0
\f4 \cf4 \strokec4 clicks
\f0 \cf2 \strokec2 \'a0array, check to see which circles have a radius greater than the maximum radius, and reset the radius there.\cb1 \
\cb3 However, that will mean there is no delay between when a circle disappears and when it starts growing again, and we would like to have a short delay. It also means that the code will be slightly less efficient since we have to loop through the\'a0
\f4 \cf4 \strokec4 clicks
\f0 \cf2 \strokec2 \'a0array twice; first to update the radius and draw the circles, and second to reset the circles that have reached maximum size.\cb1 \
\cb3 In addition, when we get around to adding the audio to the music box, you'll see why it's a bit better to start the timer to reset the circles in the\'a0
\f4 \cf4 \strokec4 handleClick
\f0 \cf2 \strokec2 \'a0function. It'll be a little bit easier to synchronize the circles and the audio if we reset the circles from a timer there.\cb1 \
\cb3 Of course, there are many different options for how to write this code, depending on how you want the music box to behave, so explore your options and test things out! When you're working with timers (and with audio) it can get a bit tricky to keep things straight about what's happening when so it's a good exercise to step through this code on paper, and any other variations you try, and make sure you understand it.\cb1 \
}